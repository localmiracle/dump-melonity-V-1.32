// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: econ_shared_enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_econ_5fshared_5fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_econ_5fshared_5fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_econ_5fshared_5fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_econ_5fshared_5fenums_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_econ_5fshared_5fenums_2eproto;
class CMsgGenericResult;
struct CMsgGenericResultDefaultTypeInternal;
extern CMsgGenericResultDefaultTypeInternal _CMsgGenericResult_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgGenericResult* Arena::CreateMaybeMessage<::CMsgGenericResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EGCEconBaseMsg : int {
  k_EMsgGCGenericResult = 2579
};
bool EGCEconBaseMsg_IsValid(int value);
constexpr EGCEconBaseMsg EGCEconBaseMsg_MIN = k_EMsgGCGenericResult;
constexpr EGCEconBaseMsg EGCEconBaseMsg_MAX = k_EMsgGCGenericResult;
constexpr int EGCEconBaseMsg_ARRAYSIZE = EGCEconBaseMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCEconBaseMsg_descriptor();
template<typename T>
inline const std::string& EGCEconBaseMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCEconBaseMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCEconBaseMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCEconBaseMsg_descriptor(), enum_t_value);
}
inline bool EGCEconBaseMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCEconBaseMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCEconBaseMsg>(
    EGCEconBaseMsg_descriptor(), name, value);
}
enum EGCMsgResponse : int {
  k_EGCMsgResponseOK = 0,
  k_EGCMsgResponseDenied = 1,
  k_EGCMsgResponseServerError = 2,
  k_EGCMsgResponseTimeout = 3,
  k_EGCMsgResponseInvalid = 4,
  k_EGCMsgResponseNoMatch = 5,
  k_EGCMsgResponseUnknownError = 6,
  k_EGCMsgResponseNotLoggedOn = 7,
  k_EGCMsgFailedToCreate = 8
};
bool EGCMsgResponse_IsValid(int value);
constexpr EGCMsgResponse EGCMsgResponse_MIN = k_EGCMsgResponseOK;
constexpr EGCMsgResponse EGCMsgResponse_MAX = k_EGCMsgFailedToCreate;
constexpr int EGCMsgResponse_ARRAYSIZE = EGCMsgResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCMsgResponse_descriptor();
template<typename T>
inline const std::string& EGCMsgResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCMsgResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCMsgResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCMsgResponse_descriptor(), enum_t_value);
}
inline bool EGCMsgResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCMsgResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCMsgResponse>(
    EGCMsgResponse_descriptor(), name, value);
}
enum EGCMsgUseItemResponse : int {
  k_EGCMsgUseItemResponse_ItemUsed = 0,
  k_EGCMsgUseItemResponse_GiftNoOtherPlayers = 1,
  k_EGCMsgUseItemResponse_ServerError = 2,
  k_EGCMsgUseItemResponse_MiniGameAlreadyStarted = 3,
  k_EGCMsgUseItemResponse_ItemUsed_ItemsGranted = 4,
  k_EGCMsgUseItemResponse_DropRateBonusAlreadyGranted = 5,
  k_EGCMsgUseItemResponse_NotInLowPriorityPool = 6,
  k_EGCMsgUseItemResponse_NotHighEnoughLevel = 7,
  k_EGCMsgUseItemResponse_EventNotActive = 8,
  k_EGCMsgUseItemResponse_ItemUsed_EventPointsGranted = 9,
  k_EGCMsgUseItemResponse_MissingRequirement = 10,
  k_EGCMsgUseItemResponse_EmoticonUnlock_NoNew = 11,
  k_EGCMsgUseItemResponse_EmoticonUnlock_Complete = 12,
  k_EGCMsgUseItemResponse_ItemUsed_Compendium = 13
};
bool EGCMsgUseItemResponse_IsValid(int value);
constexpr EGCMsgUseItemResponse EGCMsgUseItemResponse_MIN = k_EGCMsgUseItemResponse_ItemUsed;
constexpr EGCMsgUseItemResponse EGCMsgUseItemResponse_MAX = k_EGCMsgUseItemResponse_ItemUsed_Compendium;
constexpr int EGCMsgUseItemResponse_ARRAYSIZE = EGCMsgUseItemResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCMsgUseItemResponse_descriptor();
template<typename T>
inline const std::string& EGCMsgUseItemResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCMsgUseItemResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCMsgUseItemResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCMsgUseItemResponse_descriptor(), enum_t_value);
}
inline bool EGCMsgUseItemResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCMsgUseItemResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCMsgUseItemResponse>(
    EGCMsgUseItemResponse_descriptor(), name, value);
}
// ===================================================================

class CMsgGenericResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGenericResult) */ {
 public:
  inline CMsgGenericResult() : CMsgGenericResult(nullptr) {}
  ~CMsgGenericResult() override;
  explicit PROTOBUF_CONSTEXPR CMsgGenericResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGenericResult(const CMsgGenericResult& from);
  CMsgGenericResult(CMsgGenericResult&& from) noexcept
    : CMsgGenericResult() {
    *this = ::std::move(from);
  }

  inline CMsgGenericResult& operator=(const CMsgGenericResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGenericResult& operator=(CMsgGenericResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGenericResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGenericResult* internal_default_instance() {
    return reinterpret_cast<const CMsgGenericResult*>(
               &_CMsgGenericResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgGenericResult& a, CMsgGenericResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGenericResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGenericResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGenericResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGenericResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGenericResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGenericResult& from) {
    CMsgGenericResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGenericResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGenericResult";
  }
  protected:
  explicit CMsgGenericResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugMessageFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional string debug_message = 2;
  bool has_debug_message() const;
  private:
  bool _internal_has_debug_message() const;
  public:
  void clear_debug_message();
  const std::string& debug_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_debug_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_debug_message();
  PROTOBUF_NODISCARD std::string* release_debug_message();
  void set_allocated_debug_message(std::string* debug_message);
  private:
  const std::string& _internal_debug_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_debug_message(const std::string& value);
  std::string* _internal_mutable_debug_message();
  public:

  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGenericResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_message_;
    uint32_t eresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_econ_5fshared_5fenums_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgGenericResult

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgGenericResult::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGenericResult::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgGenericResult::clear_eresult() {
  _impl_.eresult_ = 2u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGenericResult::_internal_eresult() const {
  return _impl_.eresult_;
}
inline uint32_t CMsgGenericResult::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgGenericResult.eresult)
  return _internal_eresult();
}
inline void CMsgGenericResult::_internal_set_eresult(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.eresult_ = value;
}
inline void CMsgGenericResult::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgGenericResult.eresult)
}

// optional string debug_message = 2;
inline bool CMsgGenericResult::_internal_has_debug_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGenericResult::has_debug_message() const {
  return _internal_has_debug_message();
}
inline void CMsgGenericResult::clear_debug_message() {
  _impl_.debug_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGenericResult::debug_message() const {
  // @@protoc_insertion_point(field_get:CMsgGenericResult.debug_message)
  return _internal_debug_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGenericResult::set_debug_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.debug_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGenericResult.debug_message)
}
inline std::string* CMsgGenericResult::mutable_debug_message() {
  std::string* _s = _internal_mutable_debug_message();
  // @@protoc_insertion_point(field_mutable:CMsgGenericResult.debug_message)
  return _s;
}
inline const std::string& CMsgGenericResult::_internal_debug_message() const {
  return _impl_.debug_message_.Get();
}
inline void CMsgGenericResult::_internal_set_debug_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.debug_message_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGenericResult::_internal_mutable_debug_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.debug_message_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGenericResult::release_debug_message() {
  // @@protoc_insertion_point(field_release:CMsgGenericResult.debug_message)
  if (!_internal_has_debug_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.debug_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.debug_message_.IsDefault()) {
    _impl_.debug_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGenericResult::set_allocated_debug_message(std::string* debug_message) {
  if (debug_message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.debug_message_.SetAllocated(debug_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.debug_message_.IsDefault()) {
    _impl_.debug_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGenericResult.debug_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EGCEconBaseMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCEconBaseMsg>() {
  return ::EGCEconBaseMsg_descriptor();
}
template <> struct is_proto_enum< ::EGCMsgResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCMsgResponse>() {
  return ::EGCMsgResponse_descriptor();
}
template <> struct is_proto_enum< ::EGCMsgUseItemResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCMsgUseItemResponse>() {
  return ::EGCMsgUseItemResponse_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_econ_5fshared_5fenums_2eproto
